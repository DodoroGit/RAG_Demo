services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
      POSTGRES_DB: rag_demo
    volumes:
      - ./volumes/pgdata:/var/lib/postgresql/data
    networks: [ app_net ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rag_user -d rag_demo"]
      interval: 5s
      timeout: 3s
      retries: 10

  mongo:
    image: mongo:7
    volumes:
      - ./volumes/mongodata:/data/db
    networks: [ app_net ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 10

  backend:
    build:
      context: ./backend
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks: [ app_net ]

  frontend:
    build:
      context: ./frontend
    networks: [ app_net ]

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - backend
      - frontend
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./volumes/certbot/www:/var/www/certbot
      - ./volumes/certbot/letsencrypt:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    networks: [ app_net ]

  # 只在簽憑證/續期時臨時用
  certbot:
    image: certbot/certbot:v2.11.0
    volumes:
      - ./volumes/certbot/www:/var/www/certbot
      - ./volumes/certbot/letsencrypt:/etc/letsencrypt
    entrypoint: sh
    command: -c "trap exit TERM; while :; do sleep 6h & wait $${!}; certbot renew --webroot -w /var/www/certbot --quiet; done"

networks:
  app_net:
    driver: bridge
